package cs3500.music.controller;

import java.awt.*;
import java.awt.event.KeyEvent;

import javax.swing.*;

/**
 * An adapter class to construct Swing KeyEvents from a JavaFX KeyEvent
 */
public class KeyEventAdapter extends KeyEvent {
  /**
   * Constructs a <code>KeyEvent</code> object. <p> This method throws an
   * <code>IllegalArgumentException</code> if <code>source</code> is <code>null</code>.
   *
   * @param source    The <code>Component</code> that originated the event
   * @param id        An integer indicating the type of event. For information on allowable values,
   *                  see the class description for {@link KeyEvent}
   * @param when      A long integer that specifies the time the event occurred. Passing negative or
   *                  zero value is not recommended
   * @param modifiers The modifier keys down during event (shift, ctrl, alt, meta). Passing negative
   *                  value is not recommended. Zero value means that no modifiers were passed. Use
   *                  either an extended _DOWN_MASK or old _MASK modifiers, however do not mix models
   *                  in the one event. The extended modifiers are preferred for using
   * @param keyCode   The integer code for an actual key, or VK_UNDEFINED (for a key-typed event)
   * @param keyChar   The Unicode character generated by this event, or CHAR_UNDEFINED (for
   *                  key-pressed and key-released events which do not map to a valid Unicode
   *                  character)
   * @throws IllegalArgumentException if <code>id</code> is <code>KEY_TYPED</code> and
   *                                  <code>keyChar</code> is <code>CHAR_UNDEFINED</code>; or if
   *                                  <code>id</code> is <code>KEY_TYPED</code> and
   *                                  <code>keyCode</code> is not <code>VK_UNDEFINED</code>
   * @throws IllegalArgumentException if <code>source</code> is null
   * @see #getSource()
   * @see #getID()
   * @see #getWhen()
   * @see #getModifiers()
   * @see #getKeyCode()
   * @see #getKeyChar()
   */
  private KeyEventAdapter(Component source, int id, long when, int modifiers, int keyCode, char keyChar) {
    super(source, id, when, modifiers, keyCode, keyChar);
  }

  private static int getModifiersFromFXKey(javafx.scene.input.KeyEvent fxKey) {
    int modifiers = 0;
    if (fxKey.isShiftDown()) {
      modifiers += SHIFT_DOWN_MASK;
    }
    if (fxKey.isAltDown()) {
      modifiers += ALT_DOWN_MASK;
    }
    if (fxKey.isMetaDown()) {
      modifiers += META_DOWN_MASK;
    }
    return modifiers;
  }

  public KeyEventAdapter(javafx.scene.input.KeyEvent fxKey) {
    this(new Box(0), 0, 0, getModifiersFromFXKey(fxKey),
            fxKey.getCode().ordinal(), fxKey.getCharacter().charAt(0));
  }
}
