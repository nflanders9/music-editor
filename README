Music Editor Design
Nicholas Flanders
Perry Dai



Changes:

As we began to implement a controller for the GUI view, we decided to add a ViewModel interface
as we realized that we needed to keep track of a state that was separate from our model of the
composition. The GUI views now contain a reference to a ViewModel instead of a MusicEditorModel
and the ViewModel extends MusicEditorModel. The ViewModel contains methods that track the current
time that is being rendered by the View as well as methods to get configuration information for
adding new notes and for getting and setting the set of currently selected notes.

Additionally, we refactored our render method on the View interface to take a timestamp to
render the ViewModel at. We also re-implemented our getLength() functionality to be more efficient
as certain calls from the views and the controller were causing the old implementation to be a
performance bottleneck.



Final Design Description:

Our final design includes a MusicEditorModel interface to represent musical compositions and the
Song class serves as the concrete implementation of this interface. Notes are represented through
the Playable interface and their concrete implementation is found in the Note class. All Playables
track all of the data necessary to render them, including their pitch, octave, start beat,
duration, instrument ID, and volume. Pitches are represented by an Enum which also contains
several convenience methods for converting to and from MIDI values.

The ViewModel interface extends the MusicEditorModel interface and provides methods to track
additional state information that is needed by the views for rendering that is not tracked by
the MusicEditorModel interface.

The views for our music editor all implement the View interface, which allows a client to render
a model with the given view and to change the model associated with that view. The ConsoleView
class implements View in order to return a vertical ASCII representation of the model contained
within that view. The MainGUI class is a view that uses JavaFX to render a graphical view of a
model. The CompositeView class is a view that extends the JavaFX application class and coordinates
the synchronized rendering of a graphical view and a MIDI view. The MainGUI view and the
CompositeView both implement a GuiView interface which extends the View interface and adds
additional functionality needed for rendering graphical representations of the ViewModels.

The Controller interface has two methods which simply return listeners for mouse and keyboard
events. The GUIController class is the concrete implementation of this class and the event
handlers that it returns contain Runnables which take actions on the views when they are called
as a callback by the views. The KeyboardHandler class implements the KeyListener interface and
it is responsible for associating a key event code with the appropriate Runnable to call. Because
the KeyListener interface uses Swing KeyEvents and not JavaFX KeyEvents, the KeyEventAdapter class
subclasses Swing KeyEvents and adapts a JavaFX KeyEvent to be compatible with the Swing interfaces.



Controls:

  Mouse Controls:

- Click on an empty space to add a note
- Click on a note to add it to the selection set
- Right click on any non-note space to clear the current selection
- Right click on any note to delete that note

 Keyboard Controls:

- Play/pause the composition with the space bar
- Scroll through the composition with the left and right keys
- Scroll through the visible pitches with the up and down keys
- Delete all currently selected notes with the delete key
- Shift/Transpose all currently selected notes using WASD
- Increment the instrument number to use for new notes with the Page Up and Page Down keys
- Select the number of beats to use for new notes with the number keys 1 through 9
- Jump to the beginning of the composition using the Home key
- Jump to the end of the composition using the End key
